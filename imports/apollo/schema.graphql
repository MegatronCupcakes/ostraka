type NavTo {
    navState: String!
    viewContent: String
    activeTag: Tag
}
type Notification {
    _id: ID!
    viewId: String!
    userId: String!
    subject: String!
    body: String
    navTo: NavTo
    active: Boolean!
    read: Boolean!
    notify: Boolean!
    createdAt: String!
}
type Notifications {
    count: Int
    notifications: [Notification]
    pageSize: Int
}
type Message {
    _id: ID!
    toId: String!
    subject: String
    body: String
    fromId: String!
    fromViewId: String!
    fromName: String
    fromTag: String!
    fromImage: String
    viewId: String!
    active: Boolean!
    read: Boolean!
    notify: Boolean!
    createdAt: String!
}
type Messages {
    count: Int
    messages: [Message]
    pageSize: Int
}

type Dependency {
    userId: String
    sequenceNumber: Int
}

type Trigger {
    action: String
    dependentUser: String
    dependentRelationship: [Dependency]
}

type History {
    _id: ID!
    userId: String!
    trigger: Trigger!
    description: String
    appliedValue: Float!
    ruleSet: String!
    active: Boolean!
    createdAt: String!
}

type Post {
    _id: ID!
    viewId: String!
    postedByTag: String
    postedBy: String
    postedById: String
    postedByProfilePic: String
    type: String
    images: [String]
    url: String
    caption: String
    tags: [String]
    tagIds: [String]
    mentions: [String]
    mentionIds: [String]
    comments: [String]
    likeCount: Int!
    dislikeCount: Int!
    shareCount: Int!
    sharedContentId: String
    sharedById: String
    liked: Boolean!
    disliked: Boolean!
    shared: Boolean!
    active: Boolean!
    createdAt: String!
}

type Comment {
    _id: ID!
    parentId: String
    userId: String
    postedByTag: String
    postedBy: String
    postedById: String
    postedByProfilePic: String
    comment: String
    tags: [String]
    tagIds: [String]
    mentions: [String]
    mentionIds: [String]
    comments: [String]
    likeCount: Int!
    dislikeCount: Int!
    shareCount: Int!
    liked: Boolean!
    disliked: Boolean!
    shared: Boolean!
    active: Boolean!
    createdAt: String!
}

type User {
    _id: ID!
    viewId: String!
    active: Boolean!
    profile: UserProfile
    invitedBy: String
    invited: [String]
    followedUsers: [String]
    followingCount: Int!
    followedTopics: [UserTag]
    reputationScore: Float
    followedByCount: Int!
    followed: Boolean!
    shareCount: Int!
    ostracizeCount: Int!
    ostracized: Boolean!
}

type UserProfile {
    firstName: String
    lastName: String
    profileTag: String
    profileImage: String
    location: String
}

type Tag {
    _id: ID!
    viewId: String!
    tag: String!
    usage: [String]
    createdBy: String
    usedBy: [String]
    sharedBy: [String]
    createdAt: String!
    active: Boolean!
}

type UserTag {
    _id: String!
    tag: String!
    createdAt: String!
    updatedAt: String!
}

union Topic = Post | Comment

union SharedContent = Tag | Post | Comment | User

union SearchSite = Tag | Post | Comment | User

type SearchResult {
    count: Int
    results: [SearchSite]
    pageSize: Int
}

type SearchResults {
    User: SearchResult
    Tag: SearchResult
    Post: SearchResult
    Comment: SearchResult
}

type Query {
    getPost (_id: String): Post
    getPosts (offset: Int): [Post]
    getCommentById (_id: String): Comment
    getComments (parentId: String, offset: Int): [Comment]
    getTaggedPosts (tagId: String): [Post]
    getUserPosts (postedById: String, offset: Int): [Post]
    getTaggedComments (tagId: String): [Comment]
    getUserComments (postedById: String, offset: Int): [Comment]
    getProfile (_id: String): User
    getProfiles (userIds: [String], offset: Int): [User]
    getTopic (tagId: String, offset: Int): [Topic]
    getTrendingTopics: [Tag]
    getTrendingProfiles: [User]
    getSharedContent (sharedContentId: String, viewId: String, sharedById: String): SharedContent
    getUserHistory (userId: String): [History]
    getMessages (query: String, offset: Int): Messages
    getMessagesIndicator: Messages
    getNotifications (offset: Int): Notifications
    getNotificationsForIndicator: Notifications
    searchSite (query: String, tagOffset: Int, postOffset: Int, commentOffset: Int, userOffset: Int): SearchResults
}
